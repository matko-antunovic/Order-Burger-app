{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Matko\\\\Desktop\\\\repeat\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\Users\\\\Matko\\\\Desktop\\\\repeat\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Matko\\\\Desktop\\\\repeat\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Matko\\\\Desktop\\\\repeat\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Matko\\\\Desktop\\\\repeat\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Matko\\\\Desktop\\\\repeat\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Matko\\\\Desktop\\\\repeat\\\\src\\\\containers\\\\Checkout\\\\ContactDataFolder\\\\ContactData.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\nimport axios from \"../../../axios-orders\";\nimport Button from \"../../../components/UI/Button/Button\";\nimport classes from \"./ContactData.css\";\nimport Input from \"../../../components/UI/Input/Input\";\nimport withErrorHandler from \"../../../hoc/withErrorHandler/withErrorHandler\";\nimport * as actions from \"../../../store/actions/index\";\n\nvar ContactData =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ContactData, _Component);\n\n  function ContactData() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ContactData);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ContactData)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      orderForm: {\n        name: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Your Name\"\n          },\n          value: \"\",\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        street: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Street\"\n          },\n          value: \"\",\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        zipCode: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"ZIP Code\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            minLength: 5,\n            maxLength: 5\n          },\n          valid: false,\n          touched: false\n        },\n        country: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Country\"\n          },\n          value: \"\",\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"email\",\n            placeholder: \"Your E-Mail\"\n          },\n          value: \"\",\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        deliveryMethod: {\n          elementType: \"select\",\n          elementConfig: {\n            options: [{\n              value: \"fastest\",\n              displayValue: \"Fastest\"\n            }, {\n              value: \"cheapest\",\n              displayValue: \"Cheapest\"\n            }]\n          },\n          value: \"fastest\",\n          validation: {},\n          valid: true\n        }\n      },\n      formIsValid: false\n    };\n\n    _this.orderHandler = function (event) {\n      event.preventDefault();\n      var formData = {};\n\n      for (var formElementIdentifier in _this.state.orderForm) {\n        formData[formElementIdentifier] = _this.state.orderForm[formElementIdentifier].value;\n      }\n\n      var order = {\n        orderData: formData,\n        ingredients: _this.props.ings,\n        price: _this.props.price\n      };\n\n      _this.props.onOrderBurger(order);\n    };\n\n    _this.inputChangedHandler = function (event, inputIdentifier) {\n      var updatedOrderForm = _objectSpread({}, _this.state.orderForm);\n\n      var updatedFormElement = _objectSpread({}, updatedOrderForm[inputIdentifier]);\n\n      updatedFormElement.value = event.target.value;\n      updatedFormElement.valid = _this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n      updatedFormElement.touched = true;\n      updatedOrderForm[inputIdentifier] = updatedFormElement;\n      var formIsValid = true;\n\n      for (var _inputIdentifier in updatedOrderForm) {\n        formIsValid = updatedOrderForm[_inputIdentifier].valid && formIsValid;\n      }\n\n      _this.setState({\n        orderForm: updatedOrderForm,\n        formIsValid: formIsValid\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ContactData, [{\n    key: \"checkValidity\",\n    value: function checkValidity(value, rules) {\n      var isValid = true;\n\n      if (!rules) {\n        return true;\n      }\n\n      if (rules.required) {\n        isValid = value.trim() !== \"\" && isValid;\n      }\n\n      if (rules.minLength) {\n        isValid = value.length >= rules.minLength && isValid;\n      }\n\n      if (rules.maxLength) {\n        isValid = value.length >= rules.maxLength && isValid;\n      }\n\n      return isValid;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var formElementsArray = [];\n\n      for (var key in this.state.orderForm) {\n        formElementsArray.push({\n          id: key,\n          config: this.state.orderForm[key]\n        });\n      }\n\n      var form = React.createElement(\"form\", {\n        onSubmit: this.orderHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, formElementsArray.map(function (formElement) {\n        return React.createElement(Input, {\n          key: formElement.id,\n          elementType: formElement.config.elementType,\n          elementConfig: formElement.config.elementConfig,\n          value: formElement.config.value,\n          invalid: !formElement.config.valid,\n          touched: formElement.config.touched,\n          shouldValidate: formElement.config.validation,\n          changed: function changed(event) {\n            return _this2.inputChangedHandler(event, formElement.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 167\n          },\n          __self: this\n        });\n      }), React.createElement(Button, {\n        btnType: \"Success\",\n        disabled: !this.state.formIsValid,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, \"ORDER\"));\n\n      if (this.props.loading) {\n        form = React.createElement(Spinner, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 182\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        className: classes.ContactData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, \"Enter your Contact Data\"), form);\n    }\n  }]);\n\n  return ContactData;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.totalPrice,\n    loading: state.order.loading\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onOrderBurger: function onOrderBurger(orderData) {\n      return dispatch(actions.purchaseBurger(orderData));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","map":{"version":3,"sources":["C:\\Users\\Matko\\Desktop\\repeat\\src\\containers\\Checkout\\ContactDataFolder\\ContactData.js"],"names":["React","Component","connect","Spinner","axios","Button","classes","Input","withErrorHandler","actions","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","orderData","ingredients","props","ings","price","onOrderBurger","inputChangedHandler","inputIdentifier","updatedOrderForm","updatedFormElement","target","checkValidity","setState","rules","isValid","trim","length","formElementsArray","key","push","id","config","form","map","formElement","loading","mapStateToProps","burgerBuilder","totalPrice","mapDispatchToProps","dispatch","purchaseBurger"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport {connect} from \"react-redux\";\r\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\r\nimport axios from \"../../../axios-orders\";\r\nimport Button from \"../../../components/UI/Button/Button\";\r\nimport classes from \"./ContactData.css\";\r\nimport Input from \"../../../components/UI/Input/Input\";\r\nimport withErrorHandler from \"../../../hoc/withErrorHandler/withErrorHandler\";\r\nimport * as actions from \"../../../store/actions/index\"\r\n\r\nclass ContactData extends Component {\r\n    state = {\r\n        orderForm: {\r\n                name: {\r\n                    elementType:\"input\",\r\n                    elementConfig: {\r\n                        type: \"text\",\r\n                        placeholder:\"Your Name\"\r\n                    },\r\n                    value:\"\",\r\n                    validation: {\r\n                        required:true\r\n                    },\r\n                    valid:false,\r\n                    touched:false\r\n                },\r\n                street:{\r\n                    elementType:\"input\",\r\n                    elementConfig: {\r\n                        type: \"text\",\r\n                        placeholder:\"Street\"\r\n                    },\r\n                    value:\"\",\r\n                    validation: {\r\n                        required:true\r\n                    },\r\n                    valid:false,\r\n                    touched:false\r\n                },\r\n                zipCode: {\r\n                    elementType:\"input\",\r\n                    elementConfig: {\r\n                        type: \"text\",\r\n                        placeholder:\"ZIP Code\"\r\n                    },\r\n                    value:\"\",\r\n                    validation: {\r\n                        required:true,\r\n                        minLength:5,\r\n                        maxLength:5\r\n                    },\r\n                    valid:false,\r\n                    touched:false\r\n                },\r\n                country: {\r\n                    elementType:\"input\",\r\n                    elementConfig: {\r\n                        type: \"text\",\r\n                        placeholder:\"Country\"\r\n                    },\r\n                    value:\"\",\r\n                    validation: {\r\n                        required:true\r\n                    },\r\n                    valid:false,\r\n                    touched:false\r\n                },\r\n                email: {\r\n                    elementType:\"input\",\r\n                    elementConfig: {\r\n                        type: \"email\",\r\n                        placeholder:\"Your E-Mail\"\r\n                    },\r\n                    value:\"\",\r\n                    validation: {\r\n                        required:true\r\n                    },\r\n                    valid:false,\r\n                    touched:false\r\n                },\r\n                deliveryMethod: {\r\n                    elementType:\"select\",\r\n                    elementConfig: {\r\n                       options: [{value: \"fastest\", displayValue:\"Fastest\"},\r\n                                {value: \"cheapest\", displayValue:\"Cheapest\"}\r\n                                ]\r\n                    },\r\n                    value:\"fastest\",\r\n                    validation:{},\r\n                    valid:true\r\n                }\r\n        },\r\n        formIsValid:false,\r\n        \r\n    }\r\n\r\n    checkValidity(value, rules){\r\n        let isValid=true;\r\n        if (!rules){\r\n            return true;\r\n        }\r\n\r\n        if(rules.required) {\r\n        isValid=value.trim() !== \"\" && isValid;\r\n        }\r\n\r\n        if (rules.minLength){\r\n            isValid=value.length >= rules.minLength  && isValid;\r\n        }\r\n\r\n        if (rules.maxLength){\r\n            isValid=value.length >= rules.maxLength  && isValid;\r\n        }\r\n\r\n        return isValid;\r\n    }\r\n\r\n    orderHandler = (event) => {\r\n        event.preventDefault();\r\n        \r\n       \r\n        const formData = {};\r\n        for (let formElementIdentifier in this.state.orderForm){\r\n            formData[formElementIdentifier]=this.state.orderForm[formElementIdentifier].value;}\r\n        const order = {\r\n            orderData:formData,\r\n            ingredients:this.props.ings,\r\n            price:this.props.price\r\n        }\r\n\r\n        this.props.onOrderBurger(order);\r\n    } \r\n\r\n    inputChangedHandler=(event, inputIdentifier)=> {\r\n        const updatedOrderForm= {\r\n            ...this.state.orderForm\r\n        };\r\n        const updatedFormElement= {\r\n            ...updatedOrderForm[inputIdentifier]\r\n        };\r\n        updatedFormElement.value=event.target.value;\r\n        updatedFormElement.valid=this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\r\n        updatedFormElement.touched=true;\r\n        updatedOrderForm[inputIdentifier]=updatedFormElement;\r\n\r\n        let formIsValid = true;\r\n        for (let inputIdentifier in updatedOrderForm) {\r\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n        }\r\n        this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid});\r\n    }\r\n    \r\n\r\n    render () { \r\n        const formElementsArray= [];\r\n        for(let key in this.state.orderForm) {\r\n            formElementsArray.push({\r\n                id:key,\r\n                config:this.state.orderForm[key]\r\n            });\r\n        }\r\n        let form  = (\r\n        <form onSubmit={this.orderHandler}>\r\n            \r\n            {formElementsArray.map(formElement=> \r\n            (<Input \r\n            key={formElement.id}\r\n            elementType={formElement.config.elementType}\r\n            elementConfig={formElement.config.elementConfig}\r\n            value={formElement.config.value}\r\n            invalid={!formElement.config.valid}\r\n            touched={formElement.config.touched}\r\n            shouldValidate={formElement.config.validation}\r\n            changed={(event)=>this.inputChangedHandler(event,formElement.id)}\r\n            />))}\r\n\r\n            <Button btnType=\"Success\" disabled={!this.state.formIsValid}>ORDER</Button>\r\n        </form>\r\n        );\r\n        if (this.props.loading) {\r\n            form= <Spinner />;\r\n        }\r\n        return (\r\n            <div className={classes.ContactData}>\r\n                <h4>Enter your Contact Data</h4>\r\n               {form}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings:state.burgerBuilder.ingredients,\r\n        price:state.burgerBuilder.totalPrice,\r\n        loading:state.order.loading\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch =>{\r\n    return {\r\n        onOrderBurger: (orderData)=> dispatch(actions.purchaseBurger(orderData))\r\n    };\r\n    \r\n};\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(withErrorHandler(ContactData, axios));"]},"metadata":{},"sourceType":"module"}