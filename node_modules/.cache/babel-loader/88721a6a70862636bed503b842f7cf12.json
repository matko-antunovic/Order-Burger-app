{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Matko\\\\Desktop\\\\repeat\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\Users\\\\Matko\\\\Desktop\\\\repeat\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Matko\\\\Desktop\\\\repeat\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Matko\\\\Desktop\\\\repeat\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Matko\\\\Desktop\\\\repeat\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Matko\\\\Desktop\\\\repeat\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Matko\\\\Desktop\\\\repeat\\\\src\\\\containers\\\\Checkout\\\\ContactDataFolder\\\\ContactData.js\";\nimport React, { Component } from \"react\";\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\nimport axios from \"../../../axios-orders\";\nimport Button from \"../../../components/UI/Button/Button\";\nimport classes from \"./ContactData.css\";\nimport Input from \"../../../components/UI/Input/Input\";\n\nvar ContactData =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ContactData, _Component);\n\n  function ContactData() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ContactData);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ContactData)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      orderForm: {\n        name: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Your Name\"\n          },\n          value: \"\",\n          validation: {\n            required: true\n          }\n        },\n        street: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Street\"\n          },\n          value: \"\",\n          validation: {\n            required: true\n          }\n        },\n        zipCode: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"ZIP Code\"\n          },\n          value: \"\",\n          validation: {\n            required: true\n          }\n        },\n        country: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Country\"\n          },\n          value: \"\",\n          validation: {\n            required: true\n          }\n        },\n        email: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"email\",\n            placeholder: \"Your E-Mail\"\n          },\n          value: \"\",\n          validation: {\n            required: true\n          }\n        },\n        deliveryMethod: {\n          elementType: \"select\",\n          elementConfig: {\n            options: [{\n              value: \"fastest\",\n              displayValue: \"Fastest\"\n            }, {\n              value: \"cheapest\",\n              displayValue: \"Cheapest\"\n            }]\n          },\n          value: \"\"\n        }\n      },\n      loading: false\n    };\n\n    _this.orderHandler = function (event) {\n      event.preventDefault();\n      console.log(_this.props.ingredients);\n\n      _this.setState({\n        loading: true\n      });\n\n      var formData = {};\n\n      for (var formElementIdentifier in _this.state.orderForm) {\n        formData[formElementIdentifier] = _this.state.orderForm[formElementIdentifier].value;\n      }\n\n      var order = {\n        orderData: formData,\n        ingredients: _this.props.ingredients,\n        price: _this.props.price\n      };\n      axios.post(\"/orders.json\", order).then(function (response) {\n        _this.setState({\n          loading: false\n        });\n\n        _this.props.history.push(\"/\");\n      }).catch(function (error) {\n        _this.setState({\n          loading: false\n        });\n      });\n    };\n\n    _this.inputChangedHandler = function (event, inputIdentifier) {\n      var updatedOrderForm = _objectSpread({}, _this.state.orderForm);\n\n      var updatedFormElement = _objectSpread({}, updatedOrderForm[inputIdentifier]);\n\n      updatedFormElement.value = event.target.value;\n      updatedOrderForm[inputIdentifier] = updatedFormElement;\n\n      _this.setState({\n        orderForm: updatedOrderForm\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ContactData, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var formElementsArray = [];\n\n      for (var key in this.state.orderForm) {\n        formElementsArray.push({\n          id: key,\n          config: this.state.orderForm[key]\n        });\n      }\n\n      var form = React.createElement(\"form\", {\n        onSubmit: this.orderHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, formElementsArray.map(function (formElement) {\n        return React.createElement(Input, {\n          key: formElement.id,\n          elementType: formElement.config.elementType,\n          elementConfig: formElement.config.elementConfig,\n          value: formElement.config.value,\n          changed: function changed(event) {\n            return _this2.inputChangedHandler(event, formElement.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128\n          },\n          __self: this\n        });\n      }), React.createElement(Button, {\n        btnType: \"Success\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, \"ORDER\"));\n\n      if (this.state.loading) {\n        form = React.createElement(Spinner, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 140\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        className: classes.ContactData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, \"Enter your Contact Data\"), form);\n    }\n  }]);\n\n  return ContactData;\n}(Component);\n\nexport default ContactData;","map":{"version":3,"sources":["C:\\Users\\Matko\\Desktop\\repeat\\src\\containers\\Checkout\\ContactDataFolder\\ContactData.js"],"names":["React","Component","Spinner","axios","Button","classes","Input","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","street","zipCode","country","email","deliveryMethod","options","displayValue","loading","orderHandler","event","preventDefault","console","log","props","ingredients","setState","formData","formElementIdentifier","order","orderData","price","post","then","response","history","push","catch","error","inputChangedHandler","inputIdentifier","updatedOrderForm","updatedFormElement","target","formElementsArray","key","id","config","form","map","formElement"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\r\nimport axios from \"../../../axios-orders\";\r\nimport Button from \"../../../components/UI/Button/Button\";\r\nimport classes from \"./ContactData.css\";\r\nimport Input from \"../../../components/UI/Input/Input\";\r\n\r\nclass ContactData extends Component {\r\n    state = {\r\n        orderForm: {\r\n                name: {\r\n                    elementType:\"input\",\r\n                    elementConfig: {\r\n                        type: \"text\",\r\n                        placeholder:\"Your Name\"\r\n                    },\r\n                    value:\"\",\r\n                    validation: {\r\n                        required:true\r\n                    }\r\n                },\r\n                street:{\r\n                    elementType:\"input\",\r\n                    elementConfig: {\r\n                        type: \"text\",\r\n                        placeholder:\"Street\"\r\n                    },\r\n                    value:\"\",\r\n                    validation: {\r\n                        required:true\r\n                    }\r\n                },\r\n                zipCode: {\r\n                    elementType:\"input\",\r\n                    elementConfig: {\r\n                        type: \"text\",\r\n                        placeholder:\"ZIP Code\"\r\n                    },\r\n                    value:\"\",\r\n                    validation: {\r\n                        required:true\r\n                    }\r\n                },\r\n                country: {\r\n                    elementType:\"input\",\r\n                    elementConfig: {\r\n                        type: \"text\",\r\n                        placeholder:\"Country\"\r\n                    },\r\n                    value:\"\",\r\n                    validation: {\r\n                        required:true\r\n                    }\r\n                },\r\n                email: {\r\n                    elementType:\"input\",\r\n                    elementConfig: {\r\n                        type: \"email\",\r\n                        placeholder:\"Your E-Mail\"\r\n                    },\r\n                    value:\"\",\r\n                    validation: {\r\n                        required:true\r\n                    }\r\n                },\r\n                deliveryMethod: {\r\n                    elementType:\"select\",\r\n                    elementConfig: {\r\n                       options: [{value: \"fastest\", displayValue:\"Fastest\"},\r\n                                {value: \"cheapest\", displayValue:\"Cheapest\"}\r\n                                ]\r\n                    },\r\n                    value:\"\"\r\n                }\r\n        },\r\n        loading:false\r\n    }\r\n\r\n    orderHandler = (event) => {\r\n        event.preventDefault();\r\n        console.log(this.props.ingredients)\r\n        this.setState( { loading : true } );\r\n        const formData = {};\r\n        for (let formElementIdentifier in this.state.orderForm){\r\n            formData[formElementIdentifier]=this.state.orderForm[formElementIdentifier].value;}\r\n        const order = {\r\n            orderData:formData,\r\n            ingredients:this.props.ingredients,\r\n            price:this.props.price\r\n        }\r\n        axios.post(\"/orders.json\" , order)\r\n        .then(response => {\r\n            this.setState({loading: false })\r\n            this.props.history.push(\"/\"); \r\n        }\r\n            )\r\n        .catch(error => {\r\n            this.setState({loading: false });\r\n        });\r\n    } \r\n\r\n    inputChangedHandler=(event, inputIdentifier)=> {\r\n        const updatedOrderForm= {\r\n            ...this.state.orderForm\r\n        };\r\n        const updatedFormElement= {\r\n            ...updatedOrderForm[inputIdentifier]\r\n        };\r\n        updatedFormElement.value=event.target.value;\r\n        updatedOrderForm[inputIdentifier]=updatedFormElement;\r\n        this.setState({orderForm:updatedOrderForm});\r\n        };\r\n    \r\n\r\n    render () { \r\n        const formElementsArray= [];\r\n        for(let key in this.state.orderForm) {\r\n            formElementsArray.push({\r\n                id:key,\r\n                config:this.state.orderForm[key]\r\n            });\r\n        }\r\n        let form  = (\r\n        <form onSubmit={this.orderHandler}>\r\n            \r\n            {formElementsArray.map(formElement=> \r\n            (<Input \r\n            key={formElement.id}\r\n            elementType={formElement.config.elementType}\r\n            elementConfig={formElement.config.elementConfig}\r\n            value={formElement.config.value}\r\n            changed={(event)=>this.inputChangedHandler(event,formElement.id)}\r\n            />))}\r\n\r\n            <Button btnType=\"Success\">ORDER</Button>\r\n        </form>\r\n        );\r\n        if (this.state.loading) {\r\n            form= <Spinner />;\r\n        }\r\n        return (\r\n            <div className={classes.ContactData}>\r\n                <h4>Enter your Contact Data</h4>\r\n               {form}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ContactData;"]},"metadata":{},"sourceType":"module"}