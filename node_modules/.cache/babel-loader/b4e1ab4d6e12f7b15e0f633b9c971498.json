{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\Matko\\\\Desktop\\\\repeat\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"C:\\\\Users\\\\Matko\\\\Desktop\\\\repeat\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\Users\\\\Matko\\\\Desktop\\\\repeat\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Matko\\\\Desktop\\\\repeat\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Matko\\\\Desktop\\\\repeat\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Matko\\\\Desktop\\\\repeat\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Matko\\\\Desktop\\\\repeat\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Matko\\\\Desktop\\\\repeat\\\\src\\\\containers\\\\Author\\\\Author.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../store/actions/index\";\nimport Input from \"../../components/UI/Input/Input\";\nimport Button from \"../../components/UI/Button/Button\";\nimport classes from \"./Author.css\";\n\nvar Author =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Author, _Component);\n\n  function Author() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Author);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Author)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      controls: {\n        email: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"email\",\n            placeholder: \"Your Email\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"password\",\n            placeholder: \"Password\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      }\n    };\n\n    _this.inputChangedHandler = function (event, controlName) {\n      var updatedControls = _objectSpread({}, _this.state.controls, _defineProperty({}, controlName, _objectSpread({}, _this.state.controls[controlName], {\n        value: event.target.value,\n        valid: _this.checkValidity(event.target.value, _this.state.controls[controlName].validation),\n        touched: true\n      })));\n\n      _this.setState({\n        controls: updatedControls\n      });\n    };\n\n    _this.submitHandler = function (event) {\n      event.preventDefault();\n\n      _this.props.onAuthor(_this.state.controls.email, _this.state.controls.password.value);\n    };\n\n    return _this;\n  }\n\n  _createClass(Author, [{\n    key: \"checkValidity\",\n    value: function checkValidity(value, rules) {\n      var isValid = true;\n\n      if (!rules) {\n        return true;\n      }\n\n      if (rules.required) {\n        isValid = value.trim() !== \"\" && isValid;\n      }\n\n      if (rules.minLength) {\n        isValid = value.length >= rules.minLength && isValid;\n      }\n\n      if (rules.maxLength) {\n        isValid = value.length >= rules.maxLength && isValid;\n      }\n\n      return isValid;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var formElementsArray = [];\n\n      for (var key in this.state.controls) {\n        formElementsArray.push({\n          id: key,\n          config: this.state.controls[key]\n        });\n      }\n\n      var form = formElementsArray.map(function (formElement) {\n        return React.createElement(Input, {\n          key: formElement.id,\n          elementType: formElement.config.elementType,\n          elementConfig: formElement.config.elementConfig,\n          value: formElement.config.value,\n          invalid: !formElement.config.valid,\n          touched: formElement.config.touched,\n          shouldValidate: formElement.config.validation,\n          changed: function changed(event) {\n            return _this2.inputChangedHandler(event, formElement.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        });\n      });\n      return React.createElement(\"div\", {\n        className: classes.Author,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        onSubmit: this.submitHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, form, React.createElement(Button, {\n        btnType: \"Success\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, \"SUBMIT\")));\n    }\n  }]);\n\n  return Author;\n}(Component);\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onAuthor: function onAuthor(email, password) {\n      return dispatch(actions.author(email, password));\n    }\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(Author);","map":{"version":3,"sources":["C:\\Users\\Matko\\Desktop\\repeat\\src\\containers\\Author\\Author.js"],"names":["React","Component","connect","actions","Input","Button","classes","Author","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","inputChangedHandler","event","controlName","updatedControls","target","checkValidity","setState","submitHandler","preventDefault","props","onAuthor","rules","isValid","trim","length","maxLength","formElementsArray","key","push","id","config","form","map","formElement","mapDispatchToProps","dispatch","author"],"mappings":"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","sourcesContent":["import React,{Component} from \"react\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport * as actions from \"../../store/actions/index\";\r\nimport Input from \"../../components/UI/Input/Input\";\r\nimport Button from \"../../components/UI/Button/Button\";\r\nimport classes from \"./Author.css\";\r\n\r\nclass Author extends Component {\r\n\r\nstate = {\r\n    controls: {\r\n     email: {\r\n        elementType:\"input\",\r\n        elementConfig: {\r\n            type: \"email\",\r\n            placeholder:\"Your Email\"\r\n        },\r\n        value:\"\",\r\n        validation: {\r\n            required:true,\r\n            isEmail:true\r\n        },\r\n        valid:false,\r\n        touched:false\r\n    },\r\n    password: {\r\n        elementType:\"input\",\r\n        elementConfig: {\r\n            type: \"password\",\r\n            placeholder:\"Password\"\r\n        },\r\n        value:\"\",\r\n        validation: {\r\n            required:true,\r\n            minLength:6\r\n        },\r\n        valid:false,\r\n        touched:false\r\n    \r\n    }\r\n}\r\n}\r\n\r\n    checkValidity(value, rules){\r\n        let isValid=true;\r\n        if (!rules){\r\n            return true;\r\n        }\r\n\r\n        if(rules.required) {\r\n        isValid=value.trim() !== \"\" && isValid;\r\n        }\r\n\r\n        if (rules.minLength){\r\n            isValid=value.length >= rules.minLength  && isValid;\r\n        }\r\n\r\n        if (rules.maxLength){\r\n            isValid=value.length >= rules.maxLength  && isValid;\r\n        }\r\n\r\n        return isValid;\r\n    }\r\n\r\n    inputChangedHandler=(event, controlName)=> {\r\n        const updatedControls= {\r\n            ...this.state.controls,\r\n            [controlName]: {\r\n                ...this.state.controls[controlName],\r\n                    value:event.target.value,\r\n                    valid:this.checkValidity(event.target.value,this.state.controls[controlName].validation),\r\n                    touched:true\r\n            }\r\n        };\r\n        this.setState({controls: updatedControls})\r\n    }\r\n\r\n    submitHandler = (event) => {\r\n        event.preventDefault();\r\n        this.props.onAuthor(this.state.controls.email, this.state.controls.password.value)\r\n    }\r\n\r\n    render() {\r\n        const formElementsArray= [];\r\n        for(let key in this.state.controls) {\r\n            formElementsArray.push({\r\n                id:key,\r\n                config:this.state.controls[key]\r\n            });\r\n        }\r\n\r\n      \r\n\r\n        const form =  formElementsArray.map(formElement=>(\r\n            <Input \r\n            key={formElement.id}\r\n            elementType={formElement.config.elementType}\r\n            elementConfig={formElement.config.elementConfig}\r\n            value={formElement.config.value}\r\n            invalid={!formElement.config.valid}\r\n            touched={formElement.config.touched}\r\n            shouldValidate={formElement.config.validation}\r\n            changed={(event)=>this.inputChangedHandler(event,formElement.id)} />\r\n            \r\n        ) );\r\n\r\n        \r\n   \r\n        return (\r\n            <div className={classes.Author}>\r\n                <form onSubmit= {this.submitHandler}>\r\n                {form}\r\n                <Button btnType=\"Success\">SUBMIT</Button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps= dispatch => {\r\n    return {\r\n        onAuthor: (email,password)=> dispatch(actions.author(email,password))\r\n    }\r\n}\r\n\r\nexport default connect(null,mapDispatchToProps) (Author);"]},"metadata":{},"sourceType":"module"}